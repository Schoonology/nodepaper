#!/usr/bin/env node
var lib = require('../lib')
  , fs = require('fs')
  , http = require('http')
  , path = require('path')
  , $$ = require('stepdown')
  , consolidate = require('consolidate')
  , express = require('express')
  , rc = lib('rc')

//
// ## render(res, options, next)
//
// Renders **options.file** as **options.template**, fulfilling **res** with the result.
//
// If **options.file** cannot be found, a 404 will be generated.
//
// If otherwise unsuccessful, **next** will be called with the error.
//
function render(res, options, next) {
  var file = options.file
    , template = options.template

  $$([
    function ($) {
      if (!file) {
        return false
      }

      fs.exists(file, $.first())
    },
    function ($, exists) {
      if (!exists) {
        $.end(null, 404)
        return
      }

      fs.readFile(file, 'utf8', $.first())
    },
    function ($, content) {
      res.render(template, {
        content: content
      }, $.first())
    }
  ])
    .on('error', next)
    .on('complete', function (html) {
      res.send(html)
    })
}

//
// ## configure(options)
//
// Creates a new Express middleware stack. If **options** is provided:
//
//  * **options.manifest** is used to index Articles.
//
function configure(options) {
  var opts = options || {}
    , manifest = opts.manifest || []
    , app = express()

  //
  // ## Configuration
  //
  app.set('views', rc.paths.templates)
  app.set('view engine', 'html')
  app.engine('html', consolidate.dust)

  //
  // ## Middleware
  //
  app
    .use(express.favicon(rc.favicon))
    .use(express.logger())
    .use(express.query())
    .use(app.router)
    .use(express.static(rc.paths.static))
    .use(express.errorHandler())

  //
  // ## Routes
  //
  app.get('/:name', function (req, res, next) {
    render(res, {
      file: path.join(rc.paths.pages, req.params.name),
      template: 'page'
    }, next)
  })

  app.get('/article/:name', function (req, res, next) {
    render(res, {
      file: path.join(rc.paths.articles, req.params.name),
      template: 'article'
    }, next)
  })

  app.get('/', function (req, res, next) {
    var page = req.query.page || 0
      , start = page * rc.indexSize
      , length = manifest.length - start

    if (length > rc.indexSize) {
      length = rc.indexSize
    }

    $$([
      function ($) {
        var readGroup = $.group(length)

        readGroup.forEach(function (cb, index) {
          fs.readFile(path.join(rc.paths.articles, manifest[start + index]), 'utf8', readGroup[index])
        })
      },
      function ($, articles) {
        res.render('index', {
          articles: articles
        }, $.first())
      }
    ])
      .on('error', next)
      .on('complete', function (html) {
        res.send(html)
      })
  })

  return app
}

function start() {
  return http
    .createServer(configure(JSON.parse(fs.readFileSync(rc.paths.manifest, 'utf8'))))
    .listen(rc.port, function (err) {
      if (err) {
        console.error(err.stack || err.message || err)
        process.exit(1)
      }

      console.log('Listening on port ' + rc.port + '...')
    })
}

start()
