#!/usr/bin/env node
var lib = require('../lib')
  , middleware = require('../middleware')
  , rc = lib('rc')
  , http = require('http')
  , path = require('path')
  , express = require('express')
  , mongo = lib('mongo')
  , app = express()

app
  .use(express.favicon()) // TODO: Provide.
  .use(express.logger())
  .use(express.cookieParser())
  .use(express.bodyParser())
  .use(express.query())
  .use(app.router)
  // TODO: Cache.
  .use('/static', express.static(path.resolve(__dirname, '..', rc.paths.static)))
  .use('/editor', function (req, res, next) {
    res.sendfile(path.resolve(__dirname, '..', rc.paths.static, 'editor', 'index.html'))
  })
  .use('/', function (req, res, next) {
    res.sendfile(path.resolve(__dirname, '..', rc.paths.static, 'index.html'))
  })
  .use(express.errorHandler())

function handleError(err) {
  console.error(err.stack || err.message || err)
  process.exit(1)
}

mongo.connect(rc.mongo, function (err) {
  if (err) {
    return handleError(err)
  }

  http.createServer(app).listen(rc.port, function (err) {
    if (err) {
      return handleError(err)
    }

    console.info('Listening on port ' + rc.port + '...')
  })
})

//
// ## Routes
//
app.put('/api/*', middleware('validateSecret'))
app.del('/api/*', middleware('validateSecret'))
app.all('/api/*', middleware('limitAgents'))
app.all('/api/ping', middleware('ping'))

app.get('/api/articles', middleware('findResource')(lib('article')))
app.get('/api/articles/published', express.query(), middleware('getArticles')())
app.get('/api/articles/:name', middleware('getResource')(lib('article')))
app.put('/api/articles/:name', middleware('putResource')(lib('article')))
app.del('/api/articles/:name', middleware('delResource')(lib('article')))

app.get('/api/pages', middleware('findResource')(lib('page')))
app.get('/api/pages/:name', middleware('getResource')(lib('page')))
app.put('/api/pages/:name', middleware('putResource')(lib('page')))
app.del('/api/pages/:name', middleware('delResource')(lib('page')))

app.get('/api/config', middleware('getResource')(lib('config')))
app.put('/api/config', middleware('putResource')(lib('config')))
